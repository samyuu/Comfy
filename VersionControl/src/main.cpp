#define _CRT_SECURE_NO_WARNINGS
#include <Shlwapi.h>
#include <locale>
#include <fstream>

char TempFilePath[MAX_PATH];

void GetModuleDirectory(char* buffer, unsigned int size)
{
	GetModuleFileNameA(NULL, buffer, size);
	PathRemoveFileSpecA(buffer);
}

std::string ExecuteRedirectFile(const char* command)
{
	static char commandBuffer[512];

	sprintf_s(commandBuffer, "%s > %s", command, TempFilePath);
	std::system(commandBuffer);

	std::ifstream file(TempFilePath);
	return { std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>() };
}

std::string FormatUnixTime(time_t time)
{
	char timeFormatBuffer[32];
	strftime(timeFormatBuffer, sizeof(timeFormatBuffer), "%Y-%m-%d %H:%M:%S", localtime(&time));

	return std::string(timeFormatBuffer);
}

int main(int argc, char* argv[])
{
	if (argc < 2)
	{
		printf("Insufficient number of arguments.\n");
		return EXIT_FAILURE;
	}

	const char* outputFilePath = argv[1];
	std::ofstream outputFile(outputFilePath);
	
	if (!outputFile.good())
	{
		printf("Unable to open BuildVersion output file: %s.\n", outputFilePath);
		return EXIT_FAILURE;
	}

	char modulePathBuffer[MAX_PATH];
	GetModuleDirectory(modulePathBuffer, sizeof(modulePathBuffer));
	sprintf_s(TempFilePath, "%s\\%s", modulePathBuffer, "git_log.txt");

	std::string commitCountString = ExecuteRedirectFile("git rev-list HEAD --count");
	std::string branchString = ExecuteRedirectFile("git branch");
	std::string logString = ExecuteRedirectFile(R"(git log -1 --format="{ %H } { %ct } { %an }")");

	char branchBuffer[64], hashBuffer[48], timeBuffer[16], authorBuffer[128];
	sscanf(branchString.data(), "* %s", branchBuffer);
	sscanf(logString.data(), "{ %s } { %s } { %s }", hashBuffer, timeBuffer, authorBuffer);

	std::string compileTime = FormatUnixTime(time(nullptr));

	outputFile << "#pragma once\n";
	outputFile << "//------------------------------------------------------------------------------\n";
	outputFile << "// <auto-generated>\n";
	outputFile << "//     This code was generated by ComfyVersionControl.\n";
	outputFile << "//     Time of generation: " << compileTime << "\n";
	outputFile << "//\n";
	outputFile << "//     Manual editing of this file is strongly discouraged.\n";
	outputFile << "// <auto-generated>\n";
	outputFile << "//------------------------------------------------------------------------------\n";
	outputFile << "\n";
	outputFile << "class BuildVersion\n";
	outputFile << "{\n";
	outputFile << "public:\n";
	outputFile << "	static constexpr const char* Author			= \"" << authorBuffer << "\";\n";
	outputFile << "	static constexpr const char* CommitHash		= \"" << hashBuffer << "\";\n";
	outputFile << "	static constexpr const char* CommitTime		= \"" << FormatUnixTime(strtoll(timeBuffer, nullptr, 10)) << "\";\n";
	outputFile << "	static constexpr const char* CommitCount	= \"" << strtoll(commitCountString.c_str(), nullptr, 10) << "\";\n";
	outputFile << "	static constexpr const char* Branch			= \"" << branchBuffer << "\";\n";
	outputFile << "	static constexpr const char* CompileTime	= \"" << compileTime << "\";\n";
	outputFile << "};\n";

	return EXIT_SUCCESS;
}
